using System;


namespace ErikTheCoder.Sandbox.LeaderlessReplication
{
    public static class Latency
    {
        private static readonly (int MinMs, int MaxMs)[,] _values;


        static Latency()
        {
            const int slf = 0;
            _values = new (int MinMs, int MaxMs)[,]
            {
                //               NA-1        NA-2        NA-3        NA-4        NA-5        SA-1        SA-2        SA-3        SA-4        SA-5        EU-1        EU-2        EU-3        EU-4        EU-5        AS-1        AS-2        AS-3        AS-4        AS-5
                /*NA-1*/ { (slf, slf), (010, 050), (010, 050), (010, 050), (040, 100), (250, 500), (250, 500), (250, 500), (250, 500), (250, 500), (150, 400), (150, 400), (150, 400), (150, 400), (150, 400), (300, 900), (300, 900), (300, 900), (300, 900), (300, 900) },
                /*NA-2*/ { (010, 050), (slf, slf), (010, 050), (010, 050), (040, 100), (250, 500), (250, 500), (250, 500), (250, 500), (250, 500), (150, 400), (150, 400), (150, 400), (150, 400), (150, 400), (300, 900), (300, 900), (300, 900), (300, 900), (300, 900) },
                /*NA-3*/ { (010, 050), (010, 050), (slf, slf), (010, 050), (040, 100), (250, 500), (250, 500), (250, 500), (250, 500), (250, 500), (150, 400), (150, 400), (150, 400), (150, 400), (150, 400), (300, 900), (300, 900), (300, 900), (300, 900), (300, 900) },
                /*NA-4*/ { (010, 050), (010, 050), (010, 050), (slf, slf), (040, 100), (250, 500), (250, 500), (250, 500), (250, 500), (250, 500), (150, 400), (150, 400), (150, 400), (150, 400), (150, 400), (300, 900), (300, 900), (300, 900), (300, 900), (300, 900) },
                /*NA-5*/ { (040, 100), (040, 100), (040, 100), (040, 100), (slf, slf), (250, 500), (250, 500), (250, 500), (250, 500), (250, 500), (150, 400), (150, 400), (150, 400), (150, 400), (150, 400), (300, 900), (300, 900), (300, 900), (300, 900), (300, 900) },
                /*SA-1*/ { (250, 500), (250, 500), (250, 500), (250, 500), (250, 500), (slf, slf), (010, 050), (010, 050), (010, 050), (010, 050), (300, 600), (300, 600), (300, 600), (300, 600), (300, 600), (500, 999), (500, 999), (500, 999), (500, 999), (500, 999) },
                /*SA-2*/ { (250, 500), (250, 500), (250, 500), (250, 500), (250, 500), (010, 050), (slf, slf), (010, 050), (010, 050), (010, 050), (300, 600), (300, 600), (300, 600), (300, 600), (300, 600), (500, 999), (500, 999), (500, 999), (500, 999), (500, 999) },
                /*SA-3*/ { (250, 500), (250, 500), (250, 500), (250, 500), (250, 500), (010, 050), (010, 050), (slf, slf), (010, 050), (010, 050), (300, 600), (300, 600), (300, 600), (300, 600), (300, 600), (500, 999), (500, 999), (500, 999), (500, 999), (500, 999) },
                /*SA-4*/ { (250, 500), (250, 500), (250, 500), (250, 500), (250, 500), (010, 050), (010, 050), (010, 050), (slf, slf), (010, 050), (300, 600), (300, 600), (300, 600), (300, 600), (300, 600), (500, 999), (500, 999), (500, 999), (500, 999), (500, 999) },
                /*SA-5*/ { (250, 500), (250, 500), (250, 500), (250, 500), (250, 500), (010, 050), (010, 050), (010, 050), (010, 050), (slf, slf), (300, 600), (300, 600), (300, 600), (300, 600), (300, 600), (500, 999), (500, 999), (500, 999), (500, 999), (500, 999) },


            };
        }


        public static (TimeSpan Min, TimeSpan Max) Get(int FromNodeId, int ToNodeId)
        {
            (int minMs, int maxMs) = _values[FromNodeId, ToNodeId];
            return (TimeSpan.FromMilliseconds(minMs), TimeSpan.FromMilliseconds(maxMs));
        }
    }
}
